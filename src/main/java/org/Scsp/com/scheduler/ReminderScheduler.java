package org.Scsp.com.scheduler;

import org.Scsp.com.model.Booking;
import org.Scsp.com.model.User;
import org.Scsp.com.repository.BookingRepository;
import org.Scsp.com.repository.TaskCompletionRepository;
import org.Scsp.com.repository.UsersRepository;
import org.Scsp.com.service.NotificationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Random;

@Component
public class ReminderScheduler {

    @Autowired
    private UsersRepository userRepository;

    @Autowired
    private TaskCompletionRepository taskCompletionRepository;

    @Autowired
    private BookingRepository bookingRepository;

    @Autowired
    private NotificationService notificationService;

    @Scheduled(cron = "0 0 8 * * *") // M·ªói ng√†y l√∫c 8h s√°ng
    public void sendDailyTaskReminders() {
        LocalDateTime startOfDay = LocalDate.now().atStartOfDay();
        LocalDateTime endOfDay = LocalDate.now().atTime(LocalTime.MAX);

        List<User> users = userRepository.findAll();

        for (User user : users) {
            // Ki·ªÉm tra xem c√≥ nhi·ªám v·ª• n√†o ch∆∞a ho√†n th√†nh trong ng√†y kh√¥ng
            boolean hasIncomplete = taskCompletionRepository.existsByUserAndCompletedAtBetween(user, startOfDay, endOfDay);

            if (hasIncomplete) {
                notificationService.createNotification(
                        user,
                        "Nh·∫Øc nh·ªü nhi·ªám v·ª•",
                        "B·∫°n c√≤n nhi·ªám v·ª• ch∆∞a ho√†n th√†nh h√¥m nay!"
                );
            }
        }
    }


    @Scheduled(cron = "0 0 7 * * *") // M·ªói ng√†y 7h s√°ng
    public void sendRandomMotivation() {
        List<String> messages = List.of(
                "M·ªói ng√†y kh√¥ng h√∫t thu·ªëc l√† m·ªôt chi·∫øn th·∫Øng.",
                "B·∫°n ƒëang l√†m r·∫•t t·ªët. Ti·∫øp t·ª•c nh√©!",
                "H√£y nh·ªõ l√Ω do b·∫°n b·∫Øt ƒë·∫ßu h√†nh tr√¨nh n√†y.",
                "B·∫°n x·ª©ng ƒë√°ng c√≥ m·ªôt cu·ªôc s·ªëng kh·ªèe m·∫°nh kh√¥ng kh√≥i thu·ªëc."
        );

        Random random = new Random();

        List<User> users = userRepository.findAll();

        for (User user : users) {
            String message = messages.get(random.nextInt(messages.size()));
            notificationService.createNotification(
                    user,
                    "Th√¥ng ƒëi·ªáp ƒë·ªông vi√™n h√¥m nay",
                    message
            );
        }
    }



    @Scheduled(cron = "0 5 8 * * *") // M·ªói ng√†y l√∫c 8h05 s√°ng
    public void checkMilestones() {
        LocalDate today = LocalDate.now();
        List<User> users = userRepository.findAll();

        for (User user : users) {
            if (user.getQuitPlans() != null && user.getQuitPlans().getStartDate() != null) {
                LocalDate startDate = user.getQuitPlans().getStartDate().toLocalDate();
                long daysNoSmoke = ChronoUnit.DAYS.between(startDate, today);

                if (daysNoSmoke == 7 || daysNoSmoke == 30) {
                    notificationService.createNotification(
                            user,
                            "Ch√∫c m·ª´ng!",
                            "B·∫°n ƒë√£ kh√¥ng h√∫t thu·ªëc " + daysNoSmoke + " ng√†y. Ti·∫øp t·ª•c c·ªë g·∫Øng!"
                    );
                }
            }
        }
    }


    // Nh·∫Øc l·ªãch h·∫πn tr∆∞·ªõc 1 ng√†y (ch·∫°y l√∫c 9h s√°ng m·ªói ng√†y)
    @Scheduled(cron = "0 0 9 * * *")
    public void remindBookingsOneDayBefore() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime tomorrow = now.plusDays(1);
        LocalDateTime dayAfterTomorrow = now.plusDays(2);

        List<Booking> tomorrowBookings = bookingRepository.findByScheduledTimeBetween(tomorrow.toLocalDate().atStartOfDay(), dayAfterTomorrow.toLocalDate().atStartOfDay());

        for (Booking booking : tomorrowBookings) {
            if (booking.getStatus().name().equals("BOOKED")) {
                String coachName = booking.getSchedule().getCoach().getName();
                String timeSlot = booking.getSchedule().getSlot().getLabel();
                String meetingDate = booking.getSchedule().getDate().toString();
                
                notificationService.createNotification(
                        booking.getUser(),
                        "üîî Nh·∫Øc nh·ªü l·ªãch h·∫πn v·ªõi chuy√™n gia",
                        String.format("B·∫°n c√≥ l·ªãch h·∫πn v·ªõi chuy√™n gia %s v√†o ng√†y mai (%s) trong khung gi·ªù %s. " +
                                "H√£y chu·∫©n b·ªã s·∫µn s√†ng v√† tham gia ƒë√∫ng gi·ªù nh√©! " +
                                "Link tham gia: %s", 
                                coachName, meetingDate, timeSlot, 
                                booking.getMeetingLink() != null ? booking.getMeetingLink() : "S·∫Ω ƒë∆∞·ª£c cung c·∫•p sau")
                );
            }
        }
    }

    // Nh·∫Øc l·ªãch h·∫πn tr∆∞·ªõc 1 gi·ªù (ch·∫°y m·ªói 15 ph√∫t)
    @Scheduled(cron = "0 */15 * * * *")
    public void remindBookingsOneHourBefore() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime inOneHour = now.plusHours(1);
        LocalDateTime inOneHourFifteen = now.plusHours(1).plusMinutes(15);

        List<Booking> upcomingBookings = bookingRepository.findByScheduledTimeBetween(inOneHour, inOneHourFifteen);

        for (Booking booking : upcomingBookings) {
            if (booking.getStatus().name().equals("BOOKED")) {
                String coachName = booking.getSchedule().getCoach().getName();
                String timeSlot = booking.getSchedule().getSlot().getLabel();
                
                notificationService.createNotification(
                        booking.getUser(),
                        "‚è∞ L·ªãch h·∫πn s·∫Øp di·ªÖn ra trong 1 gi·ªù",
                        String.format("Bu·ªïi t∆∞ v·∫•n v·ªõi chuy√™n gia %s s·∫Ω b·∫Øt ƒë·∫ßu trong 1 gi·ªù (%s). " +
                                "Vui l√≤ng chu·∫©n b·ªã thi·∫øt b·ªã v√† tham gia ƒë√∫ng gi·ªù. " +
                                "Link tham gia: %s", 
                                coachName, timeSlot, 
                                booking.getMeetingLink() != null ? booking.getMeetingLink() : "ƒêang c·∫≠p nh·∫≠t")
                );
            }
        }
    }

    // Nh·∫Øc l·ªãch h·∫πn tr∆∞·ªõc 15 ph√∫t (ch·∫°y m·ªói 5 ph√∫t)
    @Scheduled(cron = "0 */5 * * * *")
    public void remindBookingsFifteenMinutesBefore() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime inFifteenMinutes = now.plusMinutes(15);
        LocalDateTime inTwentyMinutes = now.plusMinutes(20);

        List<Booking> soonBookings = bookingRepository.findByScheduledTimeBetween(inFifteenMinutes, inTwentyMinutes);

        for (Booking booking : soonBookings) {
            if (booking.getStatus().name().equals("BOOKED")) {
                String coachName = booking.getSchedule().getCoach().getName();
                
                notificationService.createNotification(
                        booking.getUser(),
                        "üö® L·ªãch h·∫πn s·∫Øp b·∫Øt ƒë·∫ßu",
                        String.format("Bu·ªïi t∆∞ v·∫•n v·ªõi chuy√™n gia %s s·∫Ω b·∫Øt ƒë·∫ßu trong 15 ph√∫t. " +
                                "H√£y tham gia ngay b√¢y gi·ªù: %s", 
                                coachName, 
                                booking.getMeetingLink() != null ? booking.getMeetingLink() : "Link s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t s·ªõm")
                );
            }
        }
    }

    // Nh·∫Øc nh·ªü chuy√™n gia v·ªÅ l·ªãch h·∫πn s·∫Øp t·ªõi (ch·∫°y m·ªói 30 ph√∫t)
    @Scheduled(cron = "0 */30 * * * *")
    public void remindCoachesAboutUpcomingBookings() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime inOneHour = now.plusHours(1);
        LocalDateTime inTwoHours = now.plusHours(2);

        List<Booking> upcomingBookings = bookingRepository.findByScheduledTimeBetween(inOneHour, inTwoHours);

        for (Booking booking : upcomingBookings) {
            if (booking.getStatus().name().equals("BOOKED")) {
                User coach = booking.getSchedule().getCoach();
                String clientName = booking.getUser().getName();
                String timeSlot = booking.getSchedule().getSlot().getLabel();
                
                notificationService.createNotification(
                        coach,
                        "üë®‚Äç‚öïÔ∏è Nh·∫Øc nh·ªü l·ªãch t∆∞ v·∫•n",
                        String.format("B·∫°n c√≥ l·ªãch t∆∞ v·∫•n v·ªõi kh√°ch h√†ng %s trong 1-2 gi·ªù t·ªõi (%s). " +
                                "Vui l√≤ng chu·∫©n b·ªã v√† tham gia ƒë√∫ng gi·ªù. " +
                                "Ghi ch√∫ t·ª´ kh√°ch h√†ng: %s",
                                clientName, timeSlot, 
                                booking.getNotes() != null && !booking.getNotes().isEmpty() 
                                    ? booking.getNotes() : "Kh√¥ng c√≥ ghi ch√∫")
                );
            }
        }
    }

    // Ki·ªÉm tra v√† nh·∫Øc nh·ªü v·ªÅ l·ªãch h·∫πn ƒë√£ qu√° h·∫°n (ch·∫°y v√†o 10h s√°ng m·ªói ng√†y)
    @Scheduled(cron = "0 0 10 * * *")
    public void checkMissedBookings() {
        LocalDateTime yesterday = LocalDateTime.now().minusDays(1);
        LocalDateTime now = LocalDateTime.now();

        List<Booking> missedBookings = bookingRepository.findByScheduledTimeBetween(yesterday, now);

        for (Booking booking : missedBookings) {
            if (booking.getStatus().name().equals("BOOKED")) {
                String coachName = booking.getSchedule().getCoach().getName();
                
                notificationService.createNotification(
                        booking.getUser(),
                        "‚ö†Ô∏è L·ªãch h·∫πn ƒë√£ qua",
                        String.format("B·∫°n ƒë√£ b·ªè l·ª° bu·ªïi t∆∞ v·∫•n v·ªõi chuy√™n gia %s. " +
                                "ƒê·ª´ng lo l·∫Øng, h√£y ƒë·∫∑t l·ªãch h·∫πn m·ªõi ƒë·ªÉ ti·∫øp t·ª•c ƒë∆∞·ª£c h·ªó tr·ª£ " +
                                "trong h√†nh tr√¨nh cai thu·ªëc l√° c·ªßa b·∫°n.",
                                coachName)
                );
                
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking th√†nh FINISHED ƒë·ªÉ tr√°nh nh·∫Øc l·∫°i
                booking.setStatus(org.Scsp.com.Enum.BookingStatus.FINISHED);
                bookingRepository.save(booking);
            }
        }
    }

}
