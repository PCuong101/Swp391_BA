package org.Scsp.com.controller;

import org.Scsp.com.Enum.BookingStatus;
import org.Scsp.com.dto.BookingDTO;
import org.Scsp.com.dto.BookingRequest;
import org.Scsp.com.dto.ScheduleDTO;
import org.Scsp.com.dto.ScheduleOverviewDTO;
import org.Scsp.com.model.Booking;
import org.Scsp.com.model.Schedule;
import org.Scsp.com.repository.BookingRepository;
import org.Scsp.com.repository.ScheduleRepository;
import org.Scsp.com.service.BookingService;
import org.Scsp.com.service.NotificationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;

@RestController
@RequestMapping("/api/bookings")
// Cho ph√©p frontend React truy c·∫≠p n·∫øu kh√°c domain
public class BookingController {

    @Autowired
    private BookingService bookingService;
    @Autowired
    private ScheduleRepository scheduleRepo;

    @Autowired
    private BookingRepository bookingRepo;
    
    @Autowired
    private NotificationService notificationService;

    // üîπ L·∫•y danh s√°ch l·ªãch c√≤n tr·ªëng theo coachId v√† ng√†y
    @GetMapping("/available")
    public List<ScheduleDTO> getAvailableSchedules(
            @RequestParam Long coachId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
        return bookingService.getAvailableSchedules(coachId, date);
    }

    @PutMapping("/coach/cancel")
    public String cancelSchedule(
            @RequestParam Long coachId,
            @RequestParam Long scheduleId) {

        Schedule schedule = scheduleRepo.findById(scheduleId).orElseThrow(() -> new RuntimeException("Schedule not found"));

        if (!schedule.getCoach().getUserId().equals(coachId)) {
            return "‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy l·ªãch n√†y!";
        }

        schedule.setAvailable(false); // ƒê√°nh d·∫•u kh√¥ng c√≤n kh·∫£ d·ª•ng
        scheduleRepo.save(schedule);
        return "‚úÖ L·ªãch ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.";
    }
    @PutMapping("/cancel")
    public String cancelBooking(@RequestParam long bookingId) {
        Booking booking = bookingRepo.findById(bookingId)
                .orElseThrow(() -> new RuntimeException("Booking not found"));

        if (booking.getStatus() == BookingStatus.CANCELED) {
            return "‚õî L·ªãch ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥.";
        }
        
        // L∆∞u th√¥ng tin tr∆∞·ªõc khi h·ªßy ƒë·ªÉ g·ª≠i th√¥ng b√°o
        String coachName = booking.getSchedule().getCoach().getName();
        String timeSlot = booking.getSchedule().getSlot().getLabel();
        String bookingDate = booking.getSchedule().getDate().toString();
        
        booking.setStatus(BookingStatus.CANCELED);
        bookingRepo.save(booking);
        Schedule schedule = booking.getSchedule();
        schedule.setAvailable(true);
        scheduleRepo.save(schedule);

        // üîî G·ª≠i th√¥ng b√°o h·ªßy l·ªãch
        notificationService.createNotification(
                booking.getUser(),
                "‚ùå L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy",
                String.format("L·ªãch h·∫πn v·ªõi chuy√™n gia %s v√†o %s (%s) ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng. " +
                        "B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch h·∫πn m·ªõi b·∫•t c·ª© l√∫c n√†o.",
                        coachName, timeSlot, bookingDate)
        );

        return ("‚úÖ L·ªãch ƒë√£ ƒë∆∞·ª£c h·ªßy v√† slot ƒë∆∞·ª£c m·ªü l·∫°i.");
    }

    // üîπ ƒê·∫∑t l·ªãch m·ªõi
    @PostMapping("/create")
    public Booking createBooking(@RequestBody BookingRequest bookingRequest) {
        return bookingService.createBooking(bookingRequest.userId, bookingRequest.scheduleId, bookingRequest.note);
    }
    @GetMapping("/coach/{coachId}/schedule")
    public ResponseEntity<List<ScheduleOverviewDTO>> getCoachSchedule(@PathVariable Long coachId) {
        List<ScheduleOverviewDTO> result = bookingService.getCoachScheduleWithBookings(coachId);
        return ResponseEntity.ok(result);
    }

    @GetMapping("/coach/{coachId}/published-schedule")
    public ResponseEntity<List<ScheduleOverviewDTO>> getCoachPublishedSchedule(@PathVariable Long coachId) {
        List<ScheduleOverviewDTO> result = bookingService.getCoachPublishedSchedule(coachId);
        return ResponseEntity.ok(result);
    }//

    @PutMapping("/{id}/finish")
    public Booking finishBooking(@PathVariable Long id) {
        return bookingService.finishBooking(id);
    }

    @GetMapping("/get-booking/{userId}")
    public List<BookingDTO> getBookingsByUserId(@PathVariable Long userId) {
        return bookingService.getBookingsByUserId(userId);
    }
}
